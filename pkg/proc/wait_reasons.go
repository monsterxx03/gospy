package proc

var waitReasonMap1_20 = map[uint8]string{
	0:  "",
	1:  "GC assist marking",
	2:  "IO wait",
	3:  "chan receive (nil chan)",
	4:  "chan send (nil chan)",
	5:  "dumping heap",
	6:  "garbage collection",
	7:  "garbage collection scan",
	8:  "panicwait",
	9:  "select",
	10: "select (no cases)",
	11: "GC assist wait",
	12: "GC sweep wait",
	13: "GC scavenge wait",
	14: "chan receive",
	15: "chan send",
	16: "finalizer wait",
	17: "force gc (idle)",
	18: "semacquire",
	19: "sleep",
	20: "sync.Cond.Wait",
	21: "sync.Mutex.Lock",
	22: "sync.RWMutex.RLock",
	23: "sync.RWMutex.Lock",
	24: "sync.WaitGroup.Wait",
	25: "trace reader (blocked)",
	26: "wait for GC cycle",
	27: "GC worker (idle)",
	28: "GC worker (active)",
	29: "preempted",
	30: "debug call",
	31: "GC mark termination",
	32: "stopping the world",
}

var waitReasonMap1_21 = map[uint8]string{
	0:  "",
	1:  "GC assist marking",
	2:  "IO wait",
	3:  "chan receive (nil chan)",
	4:  "chan send (nil chan)",
	5:  "dumping heap",
	6:  "garbage collection",
	7:  "garbage collection scan",
	8:  "panicwait",
	9:  "select",
	10: "select (no cases)",
	11: "GC assist wait",
	12: "GC sweep wait",
	13: "GC scavenge wait",
	14: "chan receive",
	15: "chan send",
	16: "finalizer wait",
	17: "force gc (idle)",
	18: "semacquire",
	19: "sleep",
	20: "sync.Cond.Wait",
	21: "sync.Mutex.Lock",
	22: "sync.RWMutex.RLock",
	23: "sync.RWMutex.Lock",
	24: "sync.WaitGroup.Wait",
	25: "trace reader (blocked)",
	26: "wait for GC cycle",
	27: "GC worker (idle)",
	28: "GC worker (active)",
	29: "preempted",
	30: "debug call",
	31: "GC mark termination",
	32: "stopping the world",
}

var waitReasonMap1_22 = map[uint8]string{
	0:  "",
	1:  "GC assist marking",
	2:  "IO wait",
	3:  "chan receive (nil chan)",
	4:  "chan send (nil chan)",
	5:  "dumping heap",
	6:  "garbage collection",
	7:  "garbage collection scan",
	8:  "panicwait",
	9:  "select",
	10: "select (no cases)",
	11: "GC assist wait",
	12: "GC sweep wait",
	13: "GC scavenge wait",
	14: "chan receive",
	15: "chan send",
	16: "finalizer wait",
	17: "force gc (idle)",
	18: "semacquire",
	19: "sleep",
	20: "sync.Cond.Wait",
	21: "sync.Mutex.Lock",
	22: "sync.RWMutex.RLock",
	23: "sync.RWMutex.Lock",
	24: "sync.WaitGroup.Wait",
	25: "trace reader (blocked)",
	26: "wait for GC cycle",
	27: "GC worker (idle)",
	28: "GC worker (active)",
	29: "preempted",
	30: "debug call",
	31: "GC mark termination",
	32: "stopping the world",
	33: "flushing proc caches",
	34: "trace goroutine status",
	35: "trace proc status",
	36: "page trace flush",
	37: "coroutine",
}

var waitReasonMap1_24 = map[uint8]string{
	0:  "",
	1:  "GC assist marking",
	2:  "IO wait",
	3:  "chan receive (nil chan)",
	4:  "chan send (nil chan)",
	5:  "dumping heap",
	6:  "garbage collection",
	7:  "garbage collection scan",
	8:  "panicwait",
	9:  "select",
	10: "select (no cases)",
	11: "GC assist wait",
	12: "GC sweep wait",
	13: "GC scavenge wait",
	14: "chan receive",
	15: "chan send",
	16: "finalizer wait",
	17: "force gc (idle)",
	18: "semacquire",
	19: "sleep",
	20: "sync.Cond.Wait",
	21: "sync.Mutex.Lock",
	22: "sync.RWMutex.RLock",
	23: "sync.RWMutex.Lock",
	24: "sync.WaitGroup.Wait",
	25: "trace reader (blocked)",
	26: "wait for GC cycle",
	27: "GC worker (idle)",
	28: "GC worker (active)",
	29: "preempted",
	30: "debug call",
	31: "GC mark termination",
	32: "stopping the world",
	33: "flushing proc caches",
	34: "trace goroutine status",
	35: "trace proc status",
	36: "page trace flush",
	37: "coroutine",
	38: "GC weak to strong wait",
	39: "synctest.Run",
	40: "synctest.Wait",
	41: "chan receive (synctest)",
	42: "chan send (synctest)",
	43: "select (synctest)",
}
